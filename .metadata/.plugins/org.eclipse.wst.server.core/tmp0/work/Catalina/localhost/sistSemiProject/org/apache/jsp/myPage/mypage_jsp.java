/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-09-19 09:06:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.myPage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mypage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.7.0.js\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\">\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>마이페이지</title>\n");

String root=request.getContextPath();

String myid = (String)session.getAttribute("myid");

      out.write("\n");
      out.write("<style>\n");
      out.write("/*왼쪽 마이페이지 메뉴바*/\n");
      out.write("div.menu {\n");
      out.write("	position:absolute;\n");
      out.write("	border : 0px solid gray;\n");
      out.write("	width : 200px;\n");
      out.write("	height : 1000px;\n");
      out.write("	\n");
      out.write("}\n");
      out.write("\n");
      out.write("i {\n");
      out.write("	font-size:30px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("/*info1 ~ info3 는 가운데 들어갈 마이페이지의 정보를 의미함*/\n");
      out.write("\n");
      out.write("div.center1 {\n");
      out.write("	text-align: center;\n");
      out.write("	margin-top : 0px;\n");
      out.write("	margin-left: 350px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("div.foot {\n");
      out.write("	position: absolute;\n");
      out.write("  	top: 5px; \n");
      out.write("  	left: 1000px; \n");
      out.write("}\n");
      out.write("\n");
      out.write(".sidebar {\n");
      out.write("    height: 800px;\n");
      out.write("    width: 220px;\n");
      out.write("    position: fixed;\n");
      out.write("    top: 100px;\n");
      out.write("    left: -250px; /* 초기에는 화면 밖에 위치 */\n");
      out.write("    background-color: wheat;\n");
      out.write("    transition: left 0.3s ease;\n");
      out.write("    z-index: 999; /* 이 부분을 추가해서 sidebar가 다른 요소 위에 나타나도록 설정 */\n");
      out.write("}\n");
      out.write("\n");
      out.write("        /* 사이드바 링크 스타일 (마우스 호버 시) */\n");
      out.write(".sidebar a:hover {\n");
      out.write("            background-color: #555;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* 내용 부분 스타일 */\n");
      out.write(".content {\n");
      out.write("            margin-left: 0; /* 사이드바가 열릴 때 내용 부분을 옮기기 위한 여백 */\n");
      out.write("            padding: 20px;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* 사이드바 열릴 때 애니메이션 */\n");
      out.write(".sidebar.open {\n");
      out.write("   left: 0;\n");
      out.write("        }\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<!-- =========================================================================================================  -->\n");
      out.write("<body>\n");

//관리자 로그인하면 관리자만 뜨는 창 볼 수 있게하기.

      out.write("\n");
      out.write("<div class=\"container\">\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- 여기부터 메뉴바 시작 -->\n");
      out.write("<div class=\"menu\">\n");
      out.write("<hr>\n");
      out.write("<br><br><br><br>	\n");
      out.write("<button onclick=\"toggleSidebar()\"><i class=\"bi bi-menu-app\" style=\"font-size:20px; border:none;\"></i></button><br><br>\n");
      out.write("<a href=\"https://map.naver.com/p/entry/place/1917723384?lng=126.899169&lat=33.4915799&placePath=%2Fhome&entry=plt&c=15.00,0,0,0,dh\">\n");
      out.write("<img alt=\"광고1.gif\" src=\"");
      out.print(root );
      out.write("/jeju/jongdal.gif\" style=\"width:200px; height:240px;\"></a><br><br><br>\n");
      out.write("<a href=\"https://map.naver.com/p/search/%EC%A0%9C%EC%A3%BC%EC%98%A4%EC%84%B1/place/37797002?placePath=?entry=pll&from=nx&fromNxList=true&c=15.00,0,0,0,dh\">\n");
      out.write("<img alt=\"광고2.gif\" src=\"");
      out.print(root );
      out.write("/jeju/momo.gif\" style=\"width:200px;\"></a><br><br><br>\n");
      out.write("<a href=\"https://map.naver.com/p/entry/place/1397321112?lng=126.90498876843613&lat=33.39882693494372&placePath=%2Fhome&entry=plt&c=15.00,0,0,0,dh\">\n");
      out.write("<img alt=\"광고3.gif\" src=\"");
      out.print(root );
      out.write("/jeju/onpyeong.gif\" style=\"width:200px;\"></a><br><br><br>\n");
      out.write("<a href=\"https://map.naver.com/p/entry/place/1035148658?lng=126.3012787&lat=33.2904473&placePath=%2Fhome&entry=plt&c=15.00,0,0,0,dh\">\n");
      out.write("<img alt=\"광고4.gif\" src=\"");
      out.print(root );
      out.write("/jeju/osung.gif\" style=\"width:200px;\"></a><br><br><br>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- 사이드바 -->\n");
      out.write("<div class=\"sidebar\">\n");
      out.write("	<button type=\"button\" style=\"margin-left:15px; margin-top:20px; border:none;\" onclick=\"toggleSidebar()\">\n");
      out.write("	<i class=\"bi bi-menu-app\" style=\"font-size:20px;\"></i></button>\n");
      out.write("	<br><br>\n");
      out.write("    &nbsp;&nbsp;<a href=\"index.jsp\">&nbsp;<i class=\"bi bi-house-door\"></i>&nbsp;&nbsp;&nbsp;&nbsp;<b>홈</b></a><br><br>\n");
      out.write("    &nbsp;&nbsp;<a href=\"#\">&nbsp;<i class=\"bi bi-person-lines-fill\"></i>&nbsp;&nbsp;&nbsp;&nbsp;<b>개인정보</b></a><br><br>\n");
      out.write("    &nbsp;&nbsp;<a href=\"index.jsp?main=myPage/secure.jsp\">&nbsp;<i class=\"bi bi-shield-shaded\"></i>&nbsp;&nbsp;&nbsp;&nbsp;<b>보안</b></a><br><br>\n");
      out.write("    &nbsp;&nbsp;<a href=\"index.jsp?main=admin/adminBoard.jsp\">&nbsp;<i class=\"bi bi-telephone-outbound-fill\"></i>&nbsp;&nbsp;&nbsp;<b>고객센터</b></a>\n");
      out.write("    <!-- 로그인상태면 로그아웃 , 로그아웃 상태면 로그인으로 보이게하기 0905 적어둠 -->\n");
      out.write("    <br><br><br><br><br><br><br><br><br><br>\n");
      out.write("    &nbsp;&nbsp;<a href=\"index.jsp?main=login/logoutAction.jsp\">&nbsp;<i class=\"bi bi-door-closed-fill\"></i>&nbsp;&nbsp;&nbsp;로그아웃</a><br>\n");
      out.write("    \n");
      out.write("    ");

		// 관리자 로그인하면 메뉴바 하나 더 뜨게 만들기 0905 적어둠
    
      out.write("\n");
      out.write("</div>\n");
      out.write("<!-- 여기까지 메뉴바 -->\n");
      out.write("\n");
      out.write("<div class=\"center1\">\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "myInfo.jsp", out, false);
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div class=\"foot\">\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "Calendar.jsp", out, false);
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- \n");
      out.write("\n");
      out.write("response.sendRedirect(\"../index.jsp\"); <- 메인페이지로 이동\n");
      out.write(" -->\n");
      out.write("\n");
      out.write("<button>\n");
      out.write("	<!-- 활동기록, 알림 버튼 만들고 꾸며보기 -->\n");
      out.write("</button>\n");
      out.write("\n");
      out.write("<button>\n");
      out.write("	<!-- 내가 작성한 댓글 -->\n");
      out.write("</button>\n");
      out.write("\n");
      out.write("<button>\n");
      out.write("	<!-- 내가 작성한 게시글 -->\n");
      out.write("</button>\n");
      out.write("\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    // 사이드바 열기/닫기 함수\n");
      out.write("    function toggleSidebar() {\n");
      out.write("        var sidebar = document.querySelector('.sidebar');\n");
      out.write("        sidebar.classList.toggle('open');\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
